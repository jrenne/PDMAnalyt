# ==============================================================================
# FISCAL FATIGUE, FISCAL LIMITS AND SOVEREIGN CREDIT SPREADS
# ==============================================================================
# Jean-Paul RENNE and Kevin PALLARA 
# This version: February 2024.
# ==============================================================================

# clear workspace:
rm(list = ls())

# Number of cores to be used (relevant only for estimation):
number.of.cores <- 4

# Run estimation or load pre-estimated parameters?
indic_estim <- 0

# Prepare outputs (figures and tables)?
indic_make_outputs      <- 1
indic.comput.stdv.param <- 1 # set to 1 to compute stdv of parameter estimates.
# Note that if indic.comput.stdv.param is set to one, it will take a few more
#      minutes to implement the Hamilton (1986) approach to compute 
#      confidence intervals around the fiscal-space estimates.

# Run robustness estimations (and not baseline):
indic_robustness <- 0

# Load packages:
library(tsDyn)
library(vars)
library(mnormt)
library(Hmisc)
library(expm)
library(optimx)
library(tikzDevice)
library(stringr)
library(doParallel)
library(seasonal)
library(mFilter)
library(splines)
library(zoo)
library(Rcpp)
library(RcppEigen)
library(pracma)

# Load procedures:
source("procedures/simul.and.outputs.R")
source("procedures/pricing.R")
source("procedures/kalman.R") # this is used in the sensitivity analysis
source("procedures/solve.model.R")
source("procedures/proc_toymodel.R")
source("procedures/proc_estim.R")
sourceCpp("procedures/pricing_cpp.cpp") # load C++ functions


# ---- Toy model ---------------------------------------------------------------
source("ToyModel/make_toymodel.R")
source("ToyModel/make_figures_toymodel.R")
# ------------------------------------------------------------------------------


# ---- Run estimations ---------------------------------------------------------

# Load bounds
source("estimation/make_ini_model.R")
res_bounds        <- make_bounds(model_ini)
bounds            <- res_bounds$bounds
names.4.latex     <- res_bounds$names.4.latex
indic.constraints <- res_bounds$indic.constraints

# Load different model/estimation types:
source("estimation/prepare.robustness.R")

list.param.estim <- list()
list.param.estim[[1]] <- c("alpha","d_star",
                           "Phi_11","Phi_22","Phi_33","Phi_44",
                           "sigma_y_1","sigma_y_5",
                           "sigma_pi_2","sigma_pi_6",
                           "sigma_s_3","sigma_s_7",
                           "sigma_star_4",
                           "mu_star")
indic.Sigma.w         <- which(str_detect(rownames(bounds),"param4Sigma")) # if one wants to estim. all param in sigma
list.param.estim[[2]] <- rownames(bounds)[indic.Sigma.w]
list.param.estim[[2]] <- c("param4Sigma_21","param4Sigma_31","param4Sigma_41","param4Sigma_32",
                           "param4Sigma_42","param4Sigma_43","param4Sigma_65","param4Sigma_75",
                           "param4Sigma_85","param4Sigma_76","param4Sigma_86","param4Sigma_87")
list.param.estim[[3]] <- c(list.param.estim[[1]],
                           list.param.estim[[2]])

list.of.ctries <- c("US","UK","EA","JP")

max_abs_val_param <- 20 # maximum absolute value of parameters

source("estimation/make_ini_model.R")

if(indic_estim){
  if(indic_robustness==0){
    charact.model <- charact.model.baseline
    source("estimation/run.estimation.R")  
  }else{
    for(jjjj in 1:length(all.charact.model)){
      charact.model <- all.charact.model[[jjjj]]
      source("estimation/run.estimation.R")  
    }
  }
}
# ------------------------------------------------------------------------------


# ---- Produce outputs ---------------------------------------------------------
suffix                  <- ""
indic.no.CDS            <- charact.model.baseline$indic.no.CDS
indic.colors            <- 1 # use colors on charts (for presentation)
# indicates whether standard deviations will be computed (+ use Hamilton 1986)

if(indic_make_outputs==1){
  print("")
  print("")
  print("==== Warning ============================================================")
  print("If indic.comput.stdv.param == 1, the computations can take a few minutes.")
  print("(+ red comments will be written; they result from Rc++ simulation codes.)")
  print("=========================================================================")
  print("")
  print("")
  source("outputs/run.outputs.R")
}
# ------------------------------------------------------------------------------



