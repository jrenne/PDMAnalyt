chi * all_zeta_tp1 * all_rr_t
all_d_tp1  <- all_zeta_tp1 * all_d_t - beta * (all_d_t - d_star) -
all_eta_tp1 + all_rr_tp1
# Match the previous states to the closest ones in the grid
indicators_d_tp1   <- apply(all_d_tp1,   c(1,2),function(x){which((x-all_d )^2==min((x-all_d )^2))[1]})
indicators_rr_tp1  <- apply(all_rr_tp1,  c(1,2),function(x){which((x-all_rr)^2==min((x-all_rr)^2))[1]})
indicators_x <- indicators_d_tp1 + (indicators_d_t - 1) * nb_grid_d +
(indicators_rr_tp1 - 1) * nb_grid_d^2 +
(indicators_m_tp1 - 1) * nb_grid_d^2 * nb_grid_rr
all_lambdas   <- pmax(beta * (all_d_t - d_star) + all_eta_tp1 - s_star,0)
all_proba_def <- 1 - exp(- alpha * all_lambdas)
# Compute right-hand side of the equation, conditional on varepsilon:
all_q_tp1 <- matrix(q[c(indicators_x)],nb_states,nb_eps*nb_m)
E <- exp(all_f_tp1) * ((1 + all_q_tp1)/(1 + all_q_tp1 - chi) +
all_proba_def * (exp(nu)*RR*all_OnepChiPstar -
(1 + all_q_tp1)/(1 + all_q_tp1 - chi)))
q <- chi - 1 + 1/apply(E * Probas,1,sum)
# update all_q matrix:
all_q_t  <- matrix(q,nb_states,nb_eps*nb_m)
all_rr_tp1 <- all_q_t * all_zeta_tp1 * (all_d_t - chi * all_zeta_t * all_d_t_1) +
chi * all_zeta_tp1 * all_rr_t
all_d_tp1  <- all_zeta_tp1 * all_d_t - beta * (all_d_t - d_star) -
all_eta_tp1 + all_rr_tp1
# Match the previous states to the closest ones in the grid
indicators_d_tp1   <- apply(all_d_tp1,   c(1,2),function(x){which((x-all_d )^2==min((x-all_d )^2))[1]})
indicators_rr_tp1  <- apply(all_rr_tp1,  c(1,2),function(x){which((x-all_rr)^2==min((x-all_rr)^2))[1]})
indicators_x <- indicators_d_tp1 + (indicators_d_t - 1) * nb_grid_d +
(indicators_rr_tp1 - 1) * nb_grid_d^2 +
(indicators_m_tp1 - 1) * nb_grid_d^2 * nb_grid_rr
all_lambdas   <- pmax(beta * (all_d_t - d_star) + all_eta_tp1 - s_star,0)
all_proba_def <- 1 - exp(- alpha * all_lambdas)
# Compute right-hand side of the equation, conditional on varepsilon:
all_q_tp1 <- matrix(q[c(indicators_x)],nb_states,nb_eps*nb_m)
E <- exp(all_f_tp1) * ((1 + all_q_tp1)/(1 + all_q_tp1 - chi) +
all_proba_def * (exp(nu)*RR*all_OnepChiPstar -
(1 + all_q_tp1)/(1 + all_q_tp1 - chi)))
q <- chi - 1 + 1/apply(E * Probas,1,sum)
# update all_q matrix:
all_q_t  <- matrix(q,nb_states,nb_eps*nb_m)
all_rr_tp1 <- all_q_t * all_zeta_tp1 * (all_d_t - chi * all_zeta_t * all_d_t_1) +
chi * all_zeta_tp1 * all_rr_t
all_d_tp1  <- all_zeta_tp1 * all_d_t - beta * (all_d_t - d_star) -
all_eta_tp1 + all_rr_tp1
# Match the previous states to the closest ones in the grid
indicators_d_tp1   <- apply(all_d_tp1,   c(1,2),function(x){which((x-all_d )^2==min((x-all_d )^2))[1]})
indicators_rr_tp1  <- apply(all_rr_tp1,  c(1,2),function(x){which((x-all_rr)^2==min((x-all_rr)^2))[1]})
indicators_x <- indicators_d_tp1 + (indicators_d_t - 1) * nb_grid_d +
(indicators_rr_tp1 - 1) * nb_grid_d^2 +
(indicators_m_tp1 - 1) * nb_grid_d^2 * nb_grid_rr
all_lambdas   <- pmax(beta * (all_d_t - d_star) + all_eta_tp1 - s_star,0)
all_proba_def <- 1 - exp(- alpha * all_lambdas)
# Compute right-hand side of the equation, conditional on varepsilon:
all_q_tp1 <- matrix(q[c(indicators_x)],nb_states,nb_eps*nb_m)
E <- exp(all_f_tp1) * ((1 + all_q_tp1)/(1 + all_q_tp1 - chi) +
all_proba_def * (exp(nu)*RR*all_OnepChiPstar -
(1 + all_q_tp1)/(1 + all_q_tp1 - chi)))
q <- chi - 1 + 1/apply(E * Probas,1,sum)
# update all_q matrix:
all_q_t  <- matrix(q,nb_states,nb_eps*nb_m)
all_rr_tp1 <- all_q_t * all_zeta_tp1 * (all_d_t - chi * all_zeta_t * all_d_t_1) +
chi * all_zeta_tp1 * all_rr_t
all_d_tp1  <- all_zeta_tp1 * all_d_t - beta * (all_d_t - d_star) -
all_eta_tp1 + all_rr_tp1
# Match the previous states to the closest ones in the grid
indicators_d_tp1   <- apply(all_d_tp1,   c(1,2),function(x){which((x-all_d )^2==min((x-all_d )^2))[1]})
indicators_rr_tp1  <- apply(all_rr_tp1,  c(1,2),function(x){which((x-all_rr)^2==min((x-all_rr)^2))[1]})
indicators_x <- indicators_d_tp1 + (indicators_d_t - 1) * nb_grid_d +
(indicators_rr_tp1 - 1) * nb_grid_d^2 +
(indicators_m_tp1 - 1) * nb_grid_d^2 * nb_grid_rr
all_lambdas   <- pmax(beta * (all_d_t - d_star) + all_eta_tp1 - s_star,0)
all_proba_def <- 1 - exp(- alpha * all_lambdas)
# Compute right-hand side of the equation, conditional on varepsilon:
all_q_tp1 <- matrix(q[c(indicators_x)],nb_states,nb_eps*nb_m)
E <- exp(all_f_tp1) * ((1 + all_q_tp1)/(1 + all_q_tp1 - chi) +
all_proba_def * (exp(nu)*RR*all_OnepChiPstar -
(1 + all_q_tp1)/(1 + all_q_tp1 - chi)))
q <- chi - 1 + 1/apply(E * Probas,1,sum)
# update all_q matrix:
all_q_t  <- matrix(q,nb_states,nb_eps*nb_m)
all_rr_tp1 <- all_q_t * all_zeta_tp1 * (all_d_t - chi * all_zeta_t * all_d_t_1) +
chi * all_zeta_tp1 * all_rr_t
all_d_tp1  <- all_zeta_tp1 * all_d_t - beta * (all_d_t - d_star) -
all_eta_tp1 + all_rr_tp1
# Match the previous states to the closest ones in the grid
indicators_d_tp1   <- apply(all_d_tp1,   c(1,2),function(x){which((x-all_d )^2==min((x-all_d )^2))[1]})
indicators_rr_tp1  <- apply(all_rr_tp1,  c(1,2),function(x){which((x-all_rr)^2==min((x-all_rr)^2))[1]})
indicators_x <- indicators_d_tp1 + (indicators_d_t - 1) * nb_grid_d +
(indicators_rr_tp1 - 1) * nb_grid_d^2 +
(indicators_m_tp1 - 1) * nb_grid_d^2 * nb_grid_rr
all_lambdas   <- pmax(beta * (all_d_t - d_star) + all_eta_tp1 - s_star,0)
all_proba_def <- 1 - exp(- alpha * all_lambdas)
# Compute right-hand side of the equation, conditional on varepsilon:
all_q_tp1 <- matrix(q[c(indicators_x)],nb_states,nb_eps*nb_m)
E <- exp(all_f_tp1) * ((1 + all_q_tp1)/(1 + all_q_tp1 - chi) +
all_proba_def * (exp(nu)*RR*all_OnepChiPstar -
(1 + all_q_tp1)/(1 + all_q_tp1 - chi)))
q <- chi - 1 + 1/apply(E * Probas,1,sum)
# update all_q matrix:
all_q_t  <- matrix(q,nb_states,nb_eps*nb_m)
all_rr_tp1 <- all_q_t * all_zeta_tp1 * (all_d_t - chi * all_zeta_t * all_d_t_1) +
chi * all_zeta_tp1 * all_rr_t
all_d_tp1  <- all_zeta_tp1 * all_d_t - beta * (all_d_t - d_star) -
all_eta_tp1 + all_rr_tp1
# Match the previous states to the closest ones in the grid
indicators_d_tp1   <- apply(all_d_tp1,   c(1,2),function(x){which((x-all_d )^2==min((x-all_d )^2))[1]})
indicators_rr_tp1  <- apply(all_rr_tp1,  c(1,2),function(x){which((x-all_rr)^2==min((x-all_rr)^2))[1]})
indicators_x <- indicators_d_tp1 + (indicators_d_t - 1) * nb_grid_d +
(indicators_rr_tp1 - 1) * nb_grid_d^2 +
(indicators_m_tp1 - 1) * nb_grid_d^2 * nb_grid_rr
all_lambdas   <- pmax(beta * (all_d_t - d_star) + all_eta_tp1 - s_star,0)
all_proba_def <- 1 - exp(- alpha * all_lambdas)
# Compute right-hand side of the equation, conditional on varepsilon:
all_q_tp1 <- matrix(q[c(indicators_x)],nb_states,nb_eps*nb_m)
E <- exp(all_f_tp1) * ((1 + all_q_tp1)/(1 + all_q_tp1 - chi) +
all_proba_def * (exp(nu)*RR*all_OnepChiPstar -
(1 + all_q_tp1)/(1 + all_q_tp1 - chi)))
q <- chi - 1 + 1/apply(E * Probas,1,sum)
# update all_q matrix:
all_q_t  <- matrix(q,nb_states,nb_eps*nb_m)
all_rr_tp1 <- all_q_t * all_zeta_tp1 * (all_d_t - chi * all_zeta_t * all_d_t_1) +
chi * all_zeta_tp1 * all_rr_t
all_d_tp1  <- all_zeta_tp1 * all_d_t - beta * (all_d_t - d_star) -
all_eta_tp1 + all_rr_tp1
# Match the previous states to the closest ones in the grid
indicators_d_tp1   <- apply(all_d_tp1,   c(1,2),function(x){which((x-all_d )^2==min((x-all_d )^2))[1]})
indicators_rr_tp1  <- apply(all_rr_tp1,  c(1,2),function(x){which((x-all_rr)^2==min((x-all_rr)^2))[1]})
indicators_x <- indicators_d_tp1 + (indicators_d_t - 1) * nb_grid_d +
(indicators_rr_tp1 - 1) * nb_grid_d^2 +
(indicators_m_tp1 - 1) * nb_grid_d^2 * nb_grid_rr
all_lambdas   <- pmax(beta * (all_d_t - d_star) + all_eta_tp1 - s_star,0)
all_proba_def <- 1 - exp(- alpha * all_lambdas)
# Compute right-hand side of the equation, conditional on varepsilon:
all_q_tp1 <- matrix(q[c(indicators_x)],nb_states,nb_eps*nb_m)
E <- exp(all_f_tp1) * ((1 + all_q_tp1)/(1 + all_q_tp1 - chi) +
all_proba_def * (exp(nu)*RR*all_OnepChiPstar -
(1 + all_q_tp1)/(1 + all_q_tp1 - chi)))
q <- chi - 1 + 1/apply(E * Probas,1,sum)
# update all_q matrix:
all_q_t  <- matrix(q,nb_states,nb_eps*nb_m)
all_rr_tp1 <- all_q_t * all_zeta_tp1 * (all_d_t - chi * all_zeta_t * all_d_t_1) +
chi * all_zeta_tp1 * all_rr_t
all_d_tp1  <- all_zeta_tp1 * all_d_t - beta * (all_d_t - d_star) -
all_eta_tp1 + all_rr_tp1
# Match the previous states to the closest ones in the grid
indicators_d_tp1   <- apply(all_d_tp1,   c(1,2),function(x){which((x-all_d )^2==min((x-all_d )^2))[1]})
indicators_rr_tp1  <- apply(all_rr_tp1,  c(1,2),function(x){which((x-all_rr)^2==min((x-all_rr)^2))[1]})
indicators_x <- indicators_d_tp1 + (indicators_d_t - 1) * nb_grid_d +
(indicators_rr_tp1 - 1) * nb_grid_d^2 +
(indicators_m_tp1 - 1) * nb_grid_d^2 * nb_grid_rr
all_lambdas   <- pmax(beta * (all_d_t - d_star) + all_eta_tp1 - s_star,0)
all_proba_def <- 1 - exp(- alpha * all_lambdas)
# Compute right-hand side of the equation, conditional on varepsilon:
all_q_tp1 <- matrix(q[c(indicators_x)],nb_states,nb_eps*nb_m)
E <- exp(all_f_tp1) * ((1 + all_q_tp1)/(1 + all_q_tp1 - chi) +
all_proba_def * (exp(nu)*RR*all_OnepChiPstar -
(1 + all_q_tp1)/(1 + all_q_tp1 - chi)))
q <- chi - 1 + 1/apply(E * Probas,1,sum)
q
rstar
Rcpp::sourceCpp("procedures/pricing_cpp.cpp")
res0_nominal <- solve_ToyModel(all_d,all_rr,all_eps,proba_eps,
Model,nb_iter = 10)
res0_nominal_notRcpp <- solve_ToyModel_notRcpp(all_d,all_rr,all_eps,proba_eps,
Model,nb_iter = 10)
source("~/Dropbox/Research/PDMAnalyt/make_grids.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
res0_nominal$q[c(1,400,1000,8000)]
res0_nominal_notRcpp$q[c(1,400,1000,8000)]
dim(res0_nominal_notRcpp$q)
res0_nominal_notRcpp$q
dim(res0_nominalRcpp$q)
dim(res0_nominal$q)
length(res0_nominal_notRcpp$q)
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
res0_nominal$q
res0_nominal$q[c(1,400,1000,8000)]
res0_nominal_notRcpp$q[c(1,400,1000,8000)]
Model$mu_eta
Model$mu_y
res0_nominal$q
res0_nominal$q[c(1,400,1000,30000)]
res0_nominal_notRcpp$q[c(1,400,1000,30000)]
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
levels(as.factor(res0_nominal$q))
res0_nominal$rstar
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/estimation/run_estim.R", echo=TRUE)
SSpace <- make_StateSpace(Model)
SSpace <- make_StateSpace(Model)
res_SS <- make_StateSpace(Model)
M      <- res_SS$M
N      <- res_SS$N
F      <- res_SS$F
dates  <- res_SS$dates
res_KH <- KH_filter(F,M,N,Model$Omega)
fitted <- res_KH$ksi_matrix %*% t(M)
par(mfrow=c(2,3))
for(i in 1:dim(M)[1]){
plot(F[,i],type="l")
lines(fitted[,i],col="red")
}
plot(yds_nom,type="l",ylim=c(0,.08))
plot(avg_nom_yds,type="l",ylim=c(0,.08))
avg_nom_yds  <- t(stat_distri) %*% res_LTnominal_prices$all_LT_rth
avg_real_yds <- t(stat_distri) %*% res_LTreal_prices$all_LT_rth
plot(avg_nom_yds,type="l",ylim=c(0,.08))
lines(avg_real_yds,col="red")
avg_nom_yds
plot(c(avg_nom_yds),type="l",ylim=c(0,.08))
lines(c(avg_real_yds),col="red")
plot(c(avg_nom_yds),type="l",ylim=c(0,.1))
lines(c(avg_real_yds),col="red")
stat_distri <- compute_stat_distri(Model)
avg_nom_yds  <- t(stat_distri) %*% res_LTnominal_prices$all_LT_rth
avg_real_yds <- t(stat_distri) %*% res_LTreal_prices$all_LT_rth
plot(c(avg_nom_yds),type="l",ylim=c(0,.1))
lines(c(avg_real_yds),col="red")
plot(c(avg_nom_yds),type="l",ylim=c(0,.08))
lines(c(avg_real_yds),col="red")
source("~/Dropbox/Research/PDMAnalyt/estimation/run_estim.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/estimation/run_estim.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/calibrate_beta.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/main.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/Untitled.R", echo=TRUE)
Rcpp::sourceCpp("procedures/pricing_cpp.cpp")
source("~/Dropbox/Research/PDMAnalyt/calibrate_beta.R", echo=TRUE)
plot(all_d,distri_d,type="l")
distri_rr  <- compute_distri_x(all_rr,res0_nominal$rr,p)
plot(all_rr,distri_rr,type="l")
Model$alpha
Model_RF$alpha
res0_nominal$Pstar
res0_nominal$rstar
res_stat_distri_and_rbar <- compute_stat_distri_and_rbar(Model)
res_stat_distri_and_rbar
res0_nominal$Pstar
Rcpp::sourceCpp("procedures/pricing_cpp.cpp")
res_stat_distri_and_rbar <- compute_stat_distri_and_rbar(Model)
res_stat_distri_and_rbar
Rcpp::sourceCpp("procedures/pricing_cpp.cpp")
res_stat_distri_and_rbar <- compute_stat_distri_and_rbar(Model)
res_stat_distri_and_rbar
res0_nominal$rstar
res0_nominal$Pstar
Rcpp::sourceCpp("procedures/pricing_cpp.cpp")
res0_nominal$rstar
res_stat_distri_and_rbar <- compute_stat_distri_and_rbar(Model)
res_stat_distri_and_rbar
Rcpp::sourceCpp("procedures/pricing_cpp.cpp")
res_stat_distri_and_rbar <- compute_stat_distri_and_rbar(Model)
res_stat_distri_and_rbar
res0_nominal$rstar
res0_nominal$Pstar
Rcpp::sourceCpp("procedures/pricing_cpp.cpp")
res_stat_distri_and_rbar <- compute_stat_distri_and_rbar(Model)
res_stat_distri_and_rbar
res0_nominal$rstar
Model$alpha
source("~/Dropbox/Research/PDMAnalyt/calibrate_beta.R", echo=TRUE)
Model$beta
distri_d
source("~/Dropbox/Research/PDMAnalyt/calibrate_beta.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/calibrate_beta.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/calibrate_beta.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/calibrate_beta.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/calibrate_beta.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/calibrate_beta.R", echo=TRUE)
beta <- .25
for(d_star in candidate_d_star_values){
Model$beta <- beta
Model$d_star <- d_star
# Solve model:
res0_nominal <- solve_ToyModel(all_d,all_rr,all_eps,proba_eps,
Model,nb_iter = nb_iter)
# Compute average of debt:
p <- compute_uncond_distri(res0_nominal$indicators_x,res0_nominal$Probas,1000)
distri_d  <- compute_distri_x(all_d,res0_nominal$d,p)
mean_d <- sum(distri_d * all_d)
# Compute nominal yields:
res_prices_nominal <- compute_bond_prices(Model, maxH,
res0_nominal$indicators_x,
res0_nominal$all_proba_def,
res0_nominal$Probas)
# Compute risk-free nominal yields:
Model_RF <- Model
Model_RF$RR <- 1
res_prices_nominal_RF <- compute_bond_prices(Model_RF, maxH,
res0_nominal$indicators_x,
res0_nominal$all_proba_def,
res0_nominal$Probas)
spreads <- res_prices_nominal$all_rth - res_prices_nominal_RF$all_rth
Ts <- which((res0_nominal$d==all_d[indic_DD])&
(res0_nominal$d_1==all_d[indic_DD])&(res0_nominal$rr==all_rr[indic_rr]))
avg_spreads <- c(t(stat_distri) %*% spreads[Ts,])
print("------------------------------")
print(paste("Value of beta: ",beta,", value of d_star: ",d_star,sep=""))
print(paste("Average spread (in bps): ",round(10000*avg_spreads[10],1),sep=""))
print(paste("Average debt (in percent): ",round(100*mean_d,1),sep=""))
}
Model$alpha
Targets <- list(spread_in_bps = 50,
mean_d_inpercent = 70)
source("~/Dropbox/Research/PDMAnalyt/calibrate_beta.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/calibrate_beta.R", echo=TRUE)
best
source("~/Dropbox/Research/PDMAnalyt/calibrate_beta.R", echo=TRUE)
best
Model$chi
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/estimation/run_estim.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
all_d[v]
Model$RR
source("~/Dropbox/Research/PDMAnalyt/calibrate_beta.R", echo=TRUE)
best
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
res0_nominal <- solve_ToyModel(all_d,all_rr,all_eps,proba_eps,
Model_RF,nb_iter = nb_iter)
# Compute unconditional distribution of d:
p <- compute_uncond_distri(res0_nominal$indicators_x,res0_nominal$Probas,1000)
distri_d  <- compute_distri_x(all_d,res0_nominal$d,p)
plot(all_d,distri_d,type="l")
Model_RF <- Model
Model_RF$alpha <- 0
res0_nominal <- solve_ToyModel(all_d,all_rr,all_eps,proba_eps,
Model_RF,nb_iter = nb_iter)
# Compute unconditional distribution of d:
p <- compute_uncond_distri(res0_nominal$indicators_x,res0_nominal$Probas,1000)
distri_d  <- compute_distri_x(all_d,res0_nominal$d,p)
plot(all_d,distri_d,type="l")
source("~/Dropbox/Research/PDMAnalyt/calibrate_alpha_beta.R", echo=TRUE)
Model$alpha  <- best$alpha
Model$beta   <- best$beta
Model$d_star <- best$d_star
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
Model$chi
1 + q - 1/D
q
res_LTprices_nominal <- compute_LTRF_bond_prices(Model,maxH = 10)
stat_distri <- res_stat_distri_and_rbar$stat_distri
q <- c(t(stat_distri) %*% res_LTnominal_prices$all_LT_rth[,10])
D <- 6
Model$chi <- 1 + q - 1/D
Model$chi
chi
res_LTprices_nominal <- compute_LTRF_bond_prices(Model,maxH = 10)
stat_distri <- res_stat_distri_and_rbar$stat_distri
q <- c(t(stat_distri) %*% res_LTnominal_prices$all_LT_rth[,10])
D <- 6
Model$chi <- 1 + q - 1/D
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
chi
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
Rcpp::sourceCpp("procedures/pricing_cpp.cpp")
Model$d_star
v <- which.min(abs(all_d - .9))
Ts <- which((res0_nominal$d==all_d[v])&(res0_nominal$d_1==min(all_d))&(res0_nominal$rr==0))
plot(c(t(res0_nominal$stat_distri) %*% PD_nominal[Ts,]))
lines(c(t(res0_TIPS$stat_distri) %*% PD_TIPS[Ts,]),col="blue")
lines(c(t(res0_GDPLB$stat_distri) %*% PD_GDPLB[Ts,]),col="red")
Model$mu_eta
Model$mu_y
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
v <- which.min(abs(all_d - .8))
Ts <- which((res0_nominal$d==all_d[v])&(res0_nominal$d_1==min(all_d))&(res0_nominal$rr==0))
plot(c(t(res0_nominal$stat_distri) %*% PD_nominal[Ts,]))
lines(c(t(res0_TIPS$stat_distri)   %*% PD_TIPS[Ts,]),col="blue")
lines(c(t(res0_GDPLB$stat_distri)  %*% PD_GDPLB[Ts,]),col="red")
Model$mu_eta
Model$mu_pi
Model$mu_y
v <- which(all_d==d_star)
Ts <- which((res0_nominal$d==all_d[v])&(res0_nominal$d_1==min(all_d))&(res0_nominal$rr==0))
plot(c(t(res0_nominal$stat_distri) %*% PD_nominal[Ts,]))
v <- which.min(abs(all_d - .5))
Ts <- which((res0_nominal$d==all_d[v])&(res0_nominal$d_1==min(all_d))&(res0_nominal$rr==0))
plot(c(t(res0_nominal$stat_distri) %*% PD_nominal[Ts,]))
lines(c(t(res0_TIPS$stat_distri)   %*% PD_TIPS[Ts,]),col="blue")
lines(c(t(res0_GDPLB$stat_distri)  %*% PD_GDPLB[Ts,]),col="red")
Model <- make_model(param)
Model$mu_pi
Model$mu_y
chi
stat_distri <- compute_stat_distri(Model)
stat_distri
mean_pi <- c(t(stat_distri) %*% Model$mu_pi)
mean_y  <- c(t(stat_distri) %*% Model$mu_y)
mean_y
mean_pi
source("~/Dropbox/Research/PDMAnalyt/estimation/run_estim.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/estimation/run_estim.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/estimation/run_estim.R", echo=TRUE)
Model$s_star
Model$s_star <- .05
source("~/Dropbox/Research/PDMAnalyt/calibrate_alpha_beta.R", echo=TRUE)
dim(p)
dim(spreads)
avg_spreads <- c(t(p) %*% spreads)
avg_spreads
source("~/Dropbox/Research/PDMAnalyt/calibrate_alpha_beta.R", echo=TRUE)
# Solve model:
res0_nominal <- solve_ToyModel(all_d,all_rr,all_eps,proba_eps,
Model,nb_iter = nb_iter)
# Compute average of debt:
p <- compute_uncond_distri(res0_nominal$indicators_x,res0_nominal$Probas,1000)
distri_d  <- compute_distri_x(all_d,res0_nominal$d,p)
mean_d <- sum(distri_d * all_d)
# Compute nominal yields:
res_prices_nominal <- compute_bond_prices(Model, maxH,
res0_nominal$indicators_x,
res0_nominal$all_proba_def,
res0_nominal$Probas)
# Compute risk-free nominal yields:
Model_RF <- Model
Model_RF$RR <- 1
res_prices_nominal_RF <- compute_bond_prices(Model_RF, maxH,
res0_nominal$indicators_x,
res0_nominal$all_proba_def,
res0_nominal$Probas)
spreads <- res_prices_nominal$all_rth - res_prices_nominal_RF$all_rth
avg_spreads <- c(t(p) %*% spreads)
spread_in_bps    <- 10000*avg_spreads[10]
mean_d_in_percent <- 100*mean_d
distance <- (spread_in_bps - Targets$spread_in_bps)^2 +
(mean_d_in_percent - Targets$mean_d_in_percent)^2
print("------------------------------")
print(paste("Value of alpha: ",alpha,"; value of beta: ",beta,
"; value of d_star: ",d_star,sep=""))
print(paste("Average spread (in bps): ",round(spread_in_bps,1),sep=""))
print(paste("Average debt (in percent): ",round(mean_d_in_percent,1),sep=""))
print(paste("Distance to target: ",distance,sep=""))
plot(all_d,distri_d)
plot(all_d,distri_d,type="l")
plot(all_d,best$distri_d,type="l")
best$distri_d
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
plot(c(t(p)  %*% PD_nominal))
lines(c(t(p) %*% PD_TIPS),col="blue")
lines(c(t(p) %*% PD_GDPLB),col="red")
plot(avgLT_ExpReturns_nominal)
lines(avgLT_ExpReturns_TIPS,col="blue")
lines(avgLT_ExpReturns_GDPLB,col="red")
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
Model$mu_pi
Model$mu_y
v <- which.min(abs(all_d - .7))
Ts <- which((res0_nominal$d==all_d[v])&(res0_nominal$d_1==min(all_d))&(res0_nominal$rr==0))
plot(c(t(res0_nominal$stat_distri) %*% PD_nominal[Ts,]))
lines(c(t(res0_TIPS$stat_distri)   %*% PD_TIPS[Ts,]),col="blue")
lines(c(t(res0_GDPLB$stat_distri)  %*% PD_GDPLB[Ts,]),col="red")
v <- which.min(abs(all_d - .6))
Ts <- which((res0_nominal$d==all_d[v])&(res0_nominal$d_1==min(all_d))&(res0_nominal$rr==0))
plot(c(t(res0_nominal$stat_distri) %*% PD_nominal[Ts,]))
lines(c(t(res0_TIPS$stat_distri)   %*% PD_TIPS[Ts,]),col="blue")
lines(c(t(res0_GDPLB$stat_distri)  %*% PD_GDPLB[Ts,]),col="red")
Model$mu_eta
Model$mu_y
Model$mu_pi
plot(avgLT_ExpReturns_nominal)
lines(avgLT_ExpReturns_TIPS,col="blue")
lines(avgLT_ExpReturns_GDPLB,col="red")
Ts
res0_nominal$rr
plot(all_d,distri_d,type="l")
v <- which.min(abs(all_d - 1.0))
Ts <- which((res0_nominal$d==all_d[v])&(res0_nominal$d_1==min(all_d))&(res0_nominal$rr==0))
plot(c(t(res0_nominal$stat_distri) %*% PD_nominal[Ts,]))
lines(c(t(res0_TIPS$stat_distri)   %*% PD_TIPS[Ts,]),col="blue")
lines(c(t(res0_GDPLB$stat_distri)  %*% PD_GDPLB[Ts,]),col="red")
v <- which.min(abs(all_d - .9))
Ts <- which((res0_nominal$d==all_d[v])&(res0_nominal$d_1==min(all_d))&(res0_nominal$rr==0))
plot(c(t(res0_nominal$stat_distri) %*% PD_nominal[Ts,]))
lines(c(t(res0_TIPS$stat_distri)   %*% PD_TIPS[Ts,]),col="blue")
lines(c(t(res0_GDPLB$stat_distri)  %*% PD_GDPLB[Ts,]),col="red")
v <- which.min(abs(all_d - .6))
Ts <- which((res0_nominal$d==all_d[v])&(res0_nominal$d_1==min(all_d))&(res0_nominal$rr==0))
plot(c(t(res0_nominal$stat_distri) %*% PD_nominal[Ts,]))
lines(c(t(res0_TIPS$stat_distri)   %*% PD_TIPS[Ts,]),col="blue")
lines(c(t(res0_GDPLB$stat_distri)  %*% PD_GDPLB[Ts,]),col="red")
v <- which.min(abs(all_d - 1.3))
Ts <- which((res0_nominal$d==all_d[v])&(res0_nominal$d_1==min(all_d))&(res0_nominal$rr==0))
plot(c(t(res0_nominal$stat_distri) %*% PD_nominal[Ts,]))
lines(c(t(res0_TIPS$stat_distri)   %*% PD_TIPS[Ts,]),col="blue")
lines(c(t(res0_GDPLB$stat_distri)  %*% PD_GDPLB[Ts,]),col="red")
plot(avgLT_ExpReturns_nominal)
lines(avgLT_ExpReturns_TIPS,col="blue")
lines(avgLT_ExpReturns_GDPLB,col="red")
avgLT_ExpReturns_nominal
avgLT_ExpReturns_TIPS
avgLT_ExpReturns_GDPLB
chi
Model$mu_pi
stat_distri
stat_distrimean(stat_distri)
sum(stat_distri)
v <- which.min(abs(all_d - .5))
Ts <- which((res0_nominal$d==all_d[v])&(res0_nominal$d_1==min(all_d))&(res0_nominal$rr==0))
plot(c(t(res0_nominal$stat_distri) %*% PD_nominal[Ts,]))
lines(c(t(res0_TIPS$stat_distri)   %*% PD_TIPS[Ts,]),col="blue")
lines(c(t(res0_GDPLB$stat_distri)  %*% PD_GDPLB[Ts,]),col="red")
source("~/Dropbox/Research/PDMAnalyt/make_grids.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/Test_PDM.R", echo=TRUE)
