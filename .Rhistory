y1 = y[i],length=.1,angle=10)
eval(parse(text = gsub(" ","",
paste(
"text(x[i] + x_size_arrow,
y[i] - 0*y_chge,
pos=pos,
labels = expression(paste(kappa[pi],'=',",parameters[i,"kappa_pi"],",sep='')))",sep=""))))
eval(parse(text = gsub(" ","",
paste(
"text(x[i] + x_size_arrow,
y[i] - y_chge,
pos=pos,
labels = expression(paste(kappa[y],'=',",parameters[i,"kappa_y"],",sep='')))",sep=""))))
}
}
}
# Draw arrows:
if(count_chart==1){
legend("topright",
names_legend_4_chi,
lty=rep(NaN,nb_chi), # gives the legend appropriate symbols (lines)
lwd=1, # line width
col=c("black"),
bg="white",
pch=seq(21,21+nb_chi-1),
seg.len = 2,
cex=1,
pt.cex = 2,
title=expression(paste("Coupon decay rate ",chi,sep="")))
}
}
}
dev.off()
source("~/Dropbox/Research/PDMAnalyt/main.R", echo=TRUE)
FILE = paste("figures/Figure_strategies_perf.pdf",sep="")
pdf(file=FILE, pointsize=10, width=7, height=7)
#plot
layout(t(matrix(c(1,2,3,4,5,6,7,7,7,7), 5, 2)),
widths=c(4,1,1,1,1), heights=c(4,4), respect=T)
count_chart <- 0
for(quadrant in 1:4){
if(quadrant == 2){
par(mar=c(4,0,3,5))
plot.new()
image(x=1, y=values_of_kappa_pi, z=t(as.matrix(values_of_kappa_pi)),
col=pal1(nb_kappa_pi), xaxt="n", yaxt="n", xlab="", ylab="")
box()
axis(4,las=1,at=values_of_kappa_pi)
mtext(expression(paste("Inflation indexation ",kappa[pi],sep="")), side=4, line=3, cex=0.7)
image(x=1, y=values_of_kappa_y, z=t(as.matrix(values_of_kappa_y)),
col=pal2(nb_kappa_pi), xaxt="n", yaxt="n", xlab="", ylab="")
box()
axis(4,las=1,at=values_of_kappa_y)
mtext(expression(paste("Real GDP indexation ",kappa[y],sep="")), side=4, line=3, cex=0.7)
plot.new()
}else{
count_chart <- count_chart + 1
# Define x and y axes:
xvariable <- outputs4chart[count_chart,1]
yvariable <- outputs4chart[count_chart,2]
x <- M[,xvariable]
y <- M[,yvariable]
range_x <- max(x) - min(x)
range_y <- max(y) - min(y)
mid_x <- (max(x) + min(x))/2
xlim <- c(min(x),max(x) + .25*range_x)
ylim <- c(min(y),max(y))
par(mar=c(4,5,3,2))
plot(0,0,xlim=xlim,ylim=ylim,
xlab=outputs4charts[which(xvariable==outputs)],
ylab=outputs4charts[which(yvariable==outputs)],las=1,
main = paste("(",letters[count_chart],")",sep=""))
grid()
for(i in seq(nrow(parameters))){
points(x[i],y[i],bg=col3[i],pch=pch3[i],col="dark grey",cex=2)
x_size_arrow <- .10 * range_x * sign(x[i] - mid_x)
y_chge <- .05 * range_y
pos <- ifelse(x[i] > mid_x,4,2)
for(iii in 1:dim(matrix_values_4arrows)[1]){
if(sum(parameters[i,]==matrix_values_4arrows[iii,])==3){
arrows(x0 = x[i] + x_size_arrow,
y0 = y[i] - 0,
x1 = x[i],
y1 = y[i],length=.1,angle=10)
eval(parse(text = gsub(" ","",
paste(
"text(x[i] + x_size_arrow,
y[i] - 0*y_chge,
pos=pos,
labels = expression(paste(kappa[pi],'=',",parameters[i,"kappa_pi"],",sep='')))",sep=""))))
eval(parse(text = gsub(" ","",
paste(
"text(x[i] + x_size_arrow,
y[i] - y_chge,
pos=pos,
labels = expression(paste(kappa[y],'=',",parameters[i,"kappa_y"],",sep='')))",sep=""))))
}
}
}
if(count_chart==1){
legend("topright",
names_legend_4_chi,
lty=rep(NaN,nb_chi), # gives the legend appropriate symbols (lines)
lwd=1, # line width
col=c("black"),
bg="white",
pch=seq(21,21+nb_chi-1),
seg.len = 2,
cex=1,
pt.cex = 2,
title=expression(paste("Coupon decay rate ",chi,sep="")))
}
}
}
dev.off()
FILE = paste("figures/Figure_avg_yc.pdf",sep="")
pdf(file=FILE, pointsize=10, width=10, height=6)
par(mfrow=c(1,2))
par(plt=c(.15,.95,.15,.85))
plot(1:maxH,rep(0,maxH),
xlab="maturity, in years",ylab="",type="l",
ylim=c(-.01,.12),lwd=2,col="white",las=1,
main="(a) Nominal and real yield curves")
lower_bound <- RES$avg_nominal_yds - 1.0 * RES$Std_nominal_yds
upper_bound <- RES$avg_nominal_yds + 1.0 * RES$Std_nominal_yds
polygon(c(1:maxH,rev(1:maxH)),c(lower_bound,rev(upper_bound)),border = NaN,
col="#66AAAA44")
lines(1:maxH,RES$avg_nominal_yds,col="blue",lwd=2)
lower_bound <- RES$avg_ILB_yds - 1.0 * RES$Std_ILB_yds
upper_bound <- RES$avg_ILB_yds + 1.0 * RES$Std_ILB_yds
polygon(c(1:maxH,rev(1:maxH)),c(lower_bound,rev(upper_bound)),border = NaN,
col="#AA66AA44")
lines(1:maxH,RES$avg_ILB_yds,col="red",lwd=2)
grid()
legend("topleft", # places a legend at the appropriate place c("Health","Defense"), # puts text in the legend
c("Nominal yields","Real yields (ILBs)"),
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2,2), # line width
col=c("blue","red"),
bg="white",
#pch=c(3,NaN,NaN),
seg.len = 2,
cex=1)
plot(1:maxH,rep(0,maxH),
xlab="maturity, in years",ylab="",type="l",
ylim=c(-.01,.12),lwd=2,col="white",las=1,
main="(b) Nominal bond returns")
lower_bound <- RES$avg_annual_nominal_returns - 1.0 * RES$Std_annual_nominal_returns
upper_bound <- RES$avg_annual_nominal_returns + 1.0 * RES$Std_annual_nominal_returns
polygon(c(1:maxH,rev(1:maxH)),c(lower_bound,rev(upper_bound)),border = NaN,
col="#66AAAA44")
lines(1:maxH,c(RES$avg_annual_nominal_returns),col="blue",lwd=2)
# lower_bound <- avg_real_yds - 1.0 * Std_real_yds
# upper_bound <- avg_real_yds + 1.0 * Std_real_yds
# polygon(c(1:maxH,rev(1:maxH)),c(lower_bound,rev(upper_bound)),border = NaN,
#         col="#AA66AA44")
lines(1:maxH,RES$avg_annual_ILB_returns,col="red",lwd=2)
lower_bound <- RES$avg_annual_GDPLB_returns - 1.0 * RES$Std_annual_GDPLB_returns
upper_bound <- RES$avg_annual_GDPLB_returns + 1.0 * RES$Std_annual_GDPLB_returns
polygon(c(1:maxH,rev(1:maxH)),c(lower_bound,rev(upper_bound)),border = NaN,
col="#AAAAAA44")
lines(1:maxH,RES$avg_annual_GDPLB_returns,col="dark grey",lwd=2,lty=1)
grid()
legend("topright", # places a legend at the appropriate place c("Health","Defense"), # puts text in the legend
c("Nominal returns","ILB returns","GDP-LB returns"),
lty=c(1,1,1), # gives the legend appropriate symbols (lines)
lwd=c(2,2,1), # line width
col=c("blue","red","dark grey"),
bg="white",
#pch=c(3,NaN,NaN),
seg.len = 2,
cex=1)
dev.off()
FILE = paste("figures/Figure_avg_yc.pdf",sep="")
pdf(file=FILE, pointsize=10, width=10, height=6)
par(mfrow=c(1,2))
par(plt=c(.15,.95,.15,.85))
plot(1:maxH,rep(0,maxH),
xlab="maturity, in years",ylab="",type="l",
ylim=c(-.01,.12),lwd=2,col="white",las=1,
main="(a) Nominal and real yield curves")
lower_bound <- RES$avg_nominal_yds - 1.0 * RES$Std_nominal_yds
upper_bound <- RES$avg_nominal_yds + 1.0 * RES$Std_nominal_yds
polygon(c(1:maxH,rev(1:maxH)),c(lower_bound,rev(upper_bound)),border = NaN,
col="#66AAAA44")
lines(1:maxH,RES$avg_nominal_yds,col="blue",lwd=2)
lower_bound <- RES$avg_ILB_yds - 1.0 * RES$Std_ILB_yds
upper_bound <- RES$avg_ILB_yds + 1.0 * RES$Std_ILB_yds
polygon(c(1:maxH,rev(1:maxH)),c(lower_bound,rev(upper_bound)),border = NaN,
col="#AA66AA44")
lines(1:maxH,RES$avg_ILB_yds,col="red",lwd=2)
grid()
legend("topleft", # places a legend at the appropriate place c("Health","Defense"), # puts text in the legend
c("Nominal yields","Real yields (ILBs)"),
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2,2), # line width
col=c("blue","red"),
bg="white",
#pch=c(3,NaN,NaN),
seg.len = 2,
cex=1)
plot(1:maxH,rep(0,maxH),
xlab="maturity, in years",ylab="",type="l",
ylim=c(-.01,.12),lwd=2,col="white",las=1,
main="(b) Nominal bond returns")
lower_bound <- RES$avg_annual_nominal_returns - 1.0 * RES$Std_annual_nominal_returns
upper_bound <- RES$avg_annual_nominal_returns + 1.0 * RES$Std_annual_nominal_returns
polygon(c(1:maxH,rev(1:maxH)),c(lower_bound,rev(upper_bound)),border = NaN,
col="#66AAAA44")
lines(1:maxH,c(RES$avg_annual_nominal_returns),col="blue",lwd=2)
# lower_bound <- avg_real_yds - 1.0 * Std_real_yds
# upper_bound <- avg_real_yds + 1.0 * Std_real_yds
# polygon(c(1:maxH,rev(1:maxH)),c(lower_bound,rev(upper_bound)),border = NaN,
#         col="#AA66AA44")
lines(1:maxH,RES$avg_annual_ILB_returns,col="red",lwd=2)
lower_bound <- RES$avg_annual_GDPLB_returns - 1.0 * RES$Std_annual_GDPLB_returns
upper_bound <- RES$avg_annual_GDPLB_returns + 1.0 * RES$Std_annual_GDPLB_returns
polygon(c(1:maxH,rev(1:maxH)),c(lower_bound,rev(upper_bound)),border = NaN,
col="#AAAAAA44")
lines(1:maxH,RES$avg_annual_GDPLB_returns,col="dark grey",lwd=2,lty=1)
grid()
legend("topright", # places a legend at the appropriate place c("Health","Defense"), # puts text in the legend
c("Nominal returns","ILB returns","GDP-LB returns"),
lty=c(1,1,1), # gives the legend appropriate symbols (lines)
lwd=c(2,2,2), # line width
col=c("blue","red","dark grey"),
bg="white",
#pch=c(3,NaN,NaN),
seg.len = 2,
cex=1)
dev.off()
Model$nu_y
Model$mu_y
Model_i <- Model
Model_i$kappa_pi <- kappa_pi
Model_i$kappa_y  <- kappa_y
Model_i$chi      <- chi
Model_i$kappa_pi
Model_i$kappa_y
Model_i$kappa_y <- 1
Model_i$chi      <- chi
chi
# ============================================
# To model liquidity risks:
Model_i$delta <- Model$delta - .0 * kappa_pi
# ============================================
Model_solved_i <- solve_ToyModel(Model_i,grids,
nb_iter = nb_iter,
nb_iter_sdf = nb_iter_sdf)
# -----------------------------------
p <- compute_uncond_distri(Model_solved_i$indicators_x,
Model_solved_i$Probas,1000)
distri_d  <- compute_distri_x(grids$all_d,Model_solved_i$d,p)
plot(grids$all_d,distri_d,type="l")
distri_rr  <- compute_distri_x(grids$all_rr,Model_solved_i$rr,p)
plot(grids$all_rr,distri_rr,type="l")
# -----------------------------------
Model_i$kappa_y <- .5
# ============================================
# To model liquidity risks:
Model_i$delta <- Model$delta - .0 * kappa_pi
# ============================================
Model_solved_i <- solve_ToyModel(Model_i,grids,
nb_iter = nb_iter,
nb_iter_sdf = nb_iter_sdf)
# -----------------------------------
p <- compute_uncond_distri(Model_solved_i$indicators_x,
Model_solved_i$Probas,1000)
distri_d  <- compute_distri_x(grids$all_d,Model_solved_i$d,p)
plot(grids$all_d,distri_d,type="l")
distri_rr  <- compute_distri_x(grids$all_rr,Model_solved_i$rr,p)
plot(grids$all_rr,distri_rr,type="l")
# -----------------------------------
max_rr
max_rr <- .25
grids <- make_grid(nb_grid = nb_grid,
min_d  = min_d,
max_d  = max_d,
min_rr = min_rr,
max_rr = max_rr,
sigma_eps = Model$sigma_eps,
all_quantiles_eps = c(-2,-1,1,2))
# ============================================
# To model liquidity risks:
Model_i$delta <- Model$delta - .0 * kappa_pi
# ============================================
Model_solved_i <- solve_ToyModel(Model_i,grids,
nb_iter = nb_iter,
nb_iter_sdf = nb_iter_sdf)
# -----------------------------------
p <- compute_uncond_distri(Model_solved_i$indicators_x,
Model_solved_i$Probas,1000)
distri_d  <- compute_distri_x(grids$all_d,Model_solved_i$d,p)
plot(grids$all_d,distri_d,type="l")
distri_rr  <- compute_distri_x(grids$all_rr,Model_solved_i$rr,p)
plot(grids$all_rr,distri_rr,type="l")
# -----------------------------------
Model_i$kappa_y <- 1
# ============================================
# To model liquidity risks:
Model_i$delta <- Model$delta - .0 * kappa_pi
# ============================================
Model_solved_i <- solve_ToyModel(Model_i,grids,
nb_iter = nb_iter,
nb_iter_sdf = nb_iter_sdf)
# -----------------------------------
p <- compute_uncond_distri(Model_solved_i$indicators_x,
Model_solved_i$Probas,1000)
distri_d  <- compute_distri_x(grids$all_d,Model_solved_i$d,p)
plot(grids$all_d,distri_d,type="l")
distri_rr  <- compute_distri_x(grids$all_rr,Model_solved_i$rr,p)
plot(grids$all_rr,distri_rr,type="l")
# -----------------------------------
matrix_values_4arrows
matrix_values_4table <- matrix(c(.9,1,.3),nrow=1)
matrix_values_4table <- rbind(matrix_values_4table,
c(.9,0,.3))
matrix_values_4table <- rbind(matrix_values_4table,
c(.9,1,0))
colnames(matrix_values_4table) <- c("chi","kappa_pi","kappa_y")
matrix_values_4table
# For Latex table:
latex.column.names <- c("$\\mathbb{E}(d)$","$\\sqrt{\\mathbb{V}(d)}$",
"$q_{95}(d)$",
"$\\mathbb{E}(r)$","$\\sqrt{\\mathbb{V}(r)}$",
"$\\sqrt{\\mathbb{V}(\\Delta d)}$",
"$\\mathbb{E}(PD)$","$\\mathbb{E}(spd)$")
cbind(outputs,latex.column.names)
elasticity_of_surpluses
values_of_chi
source("outputs/make_figure_strategies.R")
matrix_values_4table
names_lines <- NULL
for(i in 1:dim(matrix_values_4table)[1]){
names_lines <- c(names_lines,
paste("$\\kappa_\\pi=",matrix_values_4table[i,"kappa_pi"],
"$",sep=""))
}
names_lines
names_lines <- NULL
for(i in 1:dim(matrix_values_4table)[1]){
names_lines <- c(names_lines,
paste(
"$\\chi=",matrix_values_4table[i,"chi"],"$, ",
"$\\kappa_\\pi=",matrix_values_4table[i,"kappa_pi"],"$, ",
"$\\kappa_y=",matrix_values_4table[i,"kappa_y"],"$",
sep=""))
}
names_lines
names_lines <- NULL
for(i in 1:dim(matrix_values_4table)[1]){
names_lines <- c(names_lines,
paste(
"$\\chi=",make.entry(matrix_values_4table[i,"chi"],format.nb1),"$, ",
"$\\kappa_\\pi=",make.entry(matrix_values_4table[i,"kappa_pi"],format.nb1),"$, ",
"$\\kappa_y=",make.entry(matrix_values_4table[i,"kappa_y"],format.nb1),"$",
sep=""))
}
names_lines
M
parameters
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
this.line
names_cases
count_case <- 0
for(case in 1:dim(matrix_values_4table)[1]){
count_case <- count_case + 1
indic_in_M <- which((matrix_values_4table[case,"chi"]==parameters[,"chi"])&
(matrix_values_4table[case,"kappa_pi"]==parameters[,"kappa_pi"])&
(matrix_values_4table[case,"kappa_y"]==parameters[,"kappa_y"]))
this.line <- names_cases[count_case]
for(output in outputs){
this.line <- paste(this.line,"&",make.entry(M[indic_in_M,outputs],format.nb2))
}
this.line <- paste(this.line,"\\\\")
latex_table <- rbind(latex_table,this.line)
}
count_case <- 0
case <- 1
count_case <- count_case + 1
indic_in_M <- which((matrix_values_4table[case,"chi"]==parameters[,"chi"])&
(matrix_values_4table[case,"kappa_pi"]==parameters[,"kappa_pi"])&
(matrix_values_4table[case,"kappa_y"]==parameters[,"kappa_y"]))
this.line <- names_cases[count_case]
this.line
outputs
for(output in outputs){
this.line <- paste(this.line,"&",make.entry(M[indic_in_M,outputs],format.nb2))
}
this.line
this.line <- names_cases[count_case]
for(output in outputs){
this.line <- paste(this.line,"&",make.entry(M[indic_in_M,output],format.nb2))
}
this.line
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
latex_table
this.line
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
this.line
column_names
column_names <- "$(\\kappa_\\pi,\\kappa_y,\\chi)$"
column_names
names_cases <- NULL
for(i in 1:dim(matrix_values_4table)[1]){
names_cases <- c(names_cases,
paste(
"$(",
make.entry(matrix_values_4table[i,"chi"],format.nb1,dollar=0),",",
make.entry(matrix_values_4table[i,"kappa_pi"],format.nb1,dollar=0),",",
make.entry(matrix_values_4table[i,"kappa_y"],format.nb1,dollar=0),")$",
sep=""))
}
names_cases
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
names_cases
columns
column_names
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
matrix_values_4table <- NULL
#matrix(c(.9,0,0),nrow=1)
matrix_values_4table <- rbind(matrix_values_4table,
c(.9,0,.3))
matrix_values_4table <- rbind(matrix_values_4table,
c(.9,1,0))
matrix_values_4table <- rbind(matrix_values_4table,
c(.9,1,.3))
colnames(matrix_values_4table) <- c("chi","kappa_pi","kappa_y")
matrix_values_4table
parameters
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
min_chi <- min(parameters[,"chi"])
min_chi
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
matrix_values_4table
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
matrix_values_4arrows
parameters
colnames(M)
source("~/Dropbox/Research/PDMAnalyt/outputs/make_figure_strategies.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/outputs/make_figure_strategies.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/outputs/make_figure_strategies.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/outputs/make_figure_strategies.R", echo=TRUE)
parameters[which.min(M[,"DaR95"]),]
parameters[which.min(M[,"stdv_d"]),]
parameters[which.min(M[,"avg_PD[maxH]"]),]
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
case
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
dim(matrix_values_4table)[1]
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
q<-.06;chi<- c(.1,.5,.9);1/(1+q-chi)
parameters
Model$nu_y
Model$nu_y  <- -.05
Model$nu_pi <- -.021
save(Model,file=paste("results/",file_with_saved_param,sep=""))
Model$mu_pi
Model$mu_y
source("outputs/make_figures_fit.R")
source("outputs/make_table_moments.R")
source("outputs/make_table_param.R")
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_param.R", echo=TRUE)
# Specify solution approach:
nb_grid     <- 27 # number of values per state variable
nb_iter     <- 30 # iterations used to solve model
nb_iter_sdf <- 10 # iterations used to solve SDF
maxH        <- 10 # maximum maturity of zero-coupon bonds
# min and max values of d and r:
min_d  <- .4
max_d  <- 1.6
min_rr <- .0
max_rr <- .15
# Determine strategies to explore:
values_of_chi      <- c(.1,.5,.9)
values_of_kappa_pi <- seq(0,1,by=.2)
values_of_kappa_y  <- seq(0,.3,by=.1)
# Define variables to be plotted on scatter plots:
outputs4chart <- matrix(NaN,3,2)
outputs4chart[,1] <- "mean_d"
outputs4chart[,2] <- c("stdv_d","DaR95","avg_PD[maxH]")
if(indic_run_performances){
print("")
print("------------------------------------------------")
print(" Compute performances of issuance strategies")
print("------------------------------------------------")
source("simulations/run_strategies.R")
source("outputs/make_figure_strategies.R")
source("outputs/make_table_strategies.R")
}
# ------------------------------------------------------------------------------
names_cases
column_names
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_strategies.R", echo=TRUE)
Model$mu_y
Model$mu_eta <- .5 * Model$mu_y
save(Model,file=paste("results/",file_with_saved_param,sep=""))
source("~/Dropbox/Research/PDMAnalyt/outputs/make_table_param.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/main.R", echo=TRUE)
source("~/Dropbox/Research/PDMAnalyt/main.R", echo=TRUE)
best
targets
Model
best$distance
best$spread_in_bps
best$mean_d_in_percent
best$stdv_d_in_percent
source("~/Dropbox/Research/PDMAnalyt/main.R", echo=TRUE)
